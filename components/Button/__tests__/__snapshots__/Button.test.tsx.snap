// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Button handles onPress events 1`] = `
Array [
  Array [],
]
`;

exports[`Button renders the disabled state 1`] = `
Object {
  "asJSON": [Function],
  "baseElement": <View
    pointerEvents="box-none"
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <View
      collapsable={true}
      pointerEvents="box-none"
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <TouchableNativeFeedback
        background={
          Object {
            "attribute": "selectableItemBackground",
            "type": "ThemeAttrAndroid",
          }
        }
        disabled={true}
        style={
          Object {
            "borderRadius": 8,
            "flex": 1,
            "justifyContent": "center",
          }
        }
        useForeground={true}
      >
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "borderRadius": 8,
                "elevation": 2,
                "flexDirection": "row",
                "justifyContent": "center",
                "marginBottom": 5,
                "marginTop": 5,
                "minHeight": 55,
                "minWidth": 150,
                "padding": 8,
                "paddingLeft": 16,
                "paddingRight": 16,
                "shadowColor": "#1B998B",
                "shadowOffset": Object {
                  "height": 2,
                  "width": 0,
                },
                "shadowOpacity": 0.75,
                "shadowRadius": 3,
              },
              Object {
                "backgroundColor": "rgba(231, 231, 233, 1)",
              },
              undefined,
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#fefefe",
                  "fontFamily": "apercu",
                  "fontSize": 20,
                  "marginBottom": 1,
                  "marginTop": 1,
                  "textAlign": "center",
                },
                undefined,
              ]
            }
          >
            This is a disabled button
          </Text>
        </View>
      </TouchableNativeFeedback>
    </View>
  </View>,
  "container": <View
    collapsable={true}
    pointerEvents="box-none"
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <TouchableNativeFeedback
      background={
        Object {
          "attribute": "selectableItemBackground",
          "type": "ThemeAttrAndroid",
        }
      }
      disabled={true}
      style={
        Object {
          "borderRadius": 8,
          "flex": 1,
          "justifyContent": "center",
        }
      }
      useForeground={true}
    >
      <View
        style={
          Array [
            Object {
              "alignItems": "center",
              "borderRadius": 8,
              "elevation": 2,
              "flexDirection": "row",
              "justifyContent": "center",
              "marginBottom": 5,
              "marginTop": 5,
              "minHeight": 55,
              "minWidth": 150,
              "padding": 8,
              "paddingLeft": 16,
              "paddingRight": 16,
              "shadowColor": "#1B998B",
              "shadowOffset": Object {
                "height": 2,
                "width": 0,
              },
              "shadowOpacity": 0.75,
              "shadowRadius": 3,
            },
            Object {
              "backgroundColor": "rgba(231, 231, 233, 1)",
            },
            undefined,
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#fefefe",
                "fontFamily": "apercu",
                "fontSize": 20,
                "marginBottom": 1,
                "marginTop": 1,
                "textAlign": "center",
              },
              undefined,
            ]
          }
        >
          This is a disabled button
        </Text>
      </View>
    </TouchableNativeFeedback>
  </View>,
  "debug": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByHintText": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByDisplayValue": [Function],
  "findByHintText": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByHintText": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByDisplayValue": [Function],
  "getByHintText": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByHintText": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByDisplayValue": [Function],
  "queryByHintText": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Button renders the disabled state 2`] = `[MockFunction]`;

exports[`Button renders the loading state 1`] = `
Object {
  "asJSON": [Function],
  "baseElement": <View
    pointerEvents="box-none"
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <View
      collapsable={true}
      pointerEvents="box-none"
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <TouchableOpacity
        style={
          Object {
            "backgroundColor": "transparent",
          }
        }
      >
        <ViewManagerAdapter_ExpoLinearGradient
          proxiedProperties={
            Object {
              "colors": Array [
                4279998859,
                4283151357,
              ],
              "endPoint": Array [
                1,
                0,
              ],
              "locations": undefined,
              "startPoint": Array [
                0,
                1,
              ],
            }
          }
          style={
            Array [
              Object {
                "alignItems": "center",
                "borderRadius": 8,
                "elevation": 2,
                "flexDirection": "row",
                "justifyContent": "center",
                "marginBottom": 5,
                "marginTop": 5,
                "minHeight": 55,
                "minWidth": 150,
                "padding": 8,
                "paddingLeft": 16,
                "paddingRight": 16,
                "shadowColor": "#1B998B",
                "shadowOffset": Object {
                  "height": 2,
                  "width": 0,
                },
                "shadowOpacity": 0.75,
                "shadowRadius": 3,
              },
              undefined,
            ]
          }
        >
          <ActivityIndicator
            animating={true}
            color="#fefefe"
            hidesWhenStopped={true}
            size={1}
          />
        </ViewManagerAdapter_ExpoLinearGradient>
      </TouchableOpacity>
    </View>
  </View>,
  "container": <View
    collapsable={true}
    pointerEvents="box-none"
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <TouchableOpacity
      style={
        Object {
          "backgroundColor": "transparent",
        }
      }
    >
      <ViewManagerAdapter_ExpoLinearGradient
        proxiedProperties={
          Object {
            "colors": Array [
              4279998859,
              4283151357,
            ],
            "endPoint": Array [
              1,
              0,
            ],
            "locations": undefined,
            "startPoint": Array [
              0,
              1,
            ],
          }
        }
        style={
          Array [
            Object {
              "alignItems": "center",
              "borderRadius": 8,
              "elevation": 2,
              "flexDirection": "row",
              "justifyContent": "center",
              "marginBottom": 5,
              "marginTop": 5,
              "minHeight": 55,
              "minWidth": 150,
              "padding": 8,
              "paddingLeft": 16,
              "paddingRight": 16,
              "shadowColor": "#1B998B",
              "shadowOffset": Object {
                "height": 2,
                "width": 0,
              },
              "shadowOpacity": 0.75,
              "shadowRadius": 3,
            },
            undefined,
          ]
        }
      >
        <ActivityIndicator
          animating={true}
          color="#fefefe"
          hidesWhenStopped={true}
          size={1}
        />
      </ViewManagerAdapter_ExpoLinearGradient>
    </TouchableOpacity>
  </View>,
  "debug": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByHintText": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByDisplayValue": [Function],
  "findByHintText": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByHintText": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByDisplayValue": [Function],
  "getByHintText": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByHintText": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByDisplayValue": [Function],
  "queryByHintText": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Button renders with raw text as child 1`] = `
Object {
  "asJSON": [Function],
  "baseElement": <View
    pointerEvents="box-none"
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <View
      collapsable={true}
      pointerEvents="box-none"
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <TouchableOpacity
        style={
          Object {
            "backgroundColor": "transparent",
          }
        }
      >
        <ViewManagerAdapter_ExpoLinearGradient
          proxiedProperties={
            Object {
              "colors": Array [
                4279998859,
                4283151357,
              ],
              "endPoint": Array [
                1,
                0,
              ],
              "locations": undefined,
              "startPoint": Array [
                0,
                1,
              ],
            }
          }
          style={
            Array [
              Object {
                "alignItems": "center",
                "borderRadius": 8,
                "elevation": 2,
                "flexDirection": "row",
                "justifyContent": "center",
                "marginBottom": 5,
                "marginTop": 5,
                "minHeight": 55,
                "minWidth": 150,
                "padding": 8,
                "paddingLeft": 16,
                "paddingRight": 16,
                "shadowColor": "#1B998B",
                "shadowOffset": Object {
                  "height": 2,
                  "width": 0,
                },
                "shadowOpacity": 0.75,
                "shadowRadius": 3,
              },
              undefined,
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#fefefe",
                  "fontFamily": "apercu",
                  "fontSize": 20,
                  "marginBottom": 1,
                  "marginTop": 1,
                  "textAlign": "center",
                },
                undefined,
              ]
            }
          >
            Press Me
          </Text>
        </ViewManagerAdapter_ExpoLinearGradient>
      </TouchableOpacity>
    </View>
  </View>,
  "container": <View
    collapsable={true}
    pointerEvents="box-none"
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <TouchableOpacity
      style={
        Object {
          "backgroundColor": "transparent",
        }
      }
    >
      <ViewManagerAdapter_ExpoLinearGradient
        proxiedProperties={
          Object {
            "colors": Array [
              4279998859,
              4283151357,
            ],
            "endPoint": Array [
              1,
              0,
            ],
            "locations": undefined,
            "startPoint": Array [
              0,
              1,
            ],
          }
        }
        style={
          Array [
            Object {
              "alignItems": "center",
              "borderRadius": 8,
              "elevation": 2,
              "flexDirection": "row",
              "justifyContent": "center",
              "marginBottom": 5,
              "marginTop": 5,
              "minHeight": 55,
              "minWidth": 150,
              "padding": 8,
              "paddingLeft": 16,
              "paddingRight": 16,
              "shadowColor": "#1B998B",
              "shadowOffset": Object {
                "height": 2,
                "width": 0,
              },
              "shadowOpacity": 0.75,
              "shadowRadius": 3,
            },
            undefined,
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#fefefe",
                "fontFamily": "apercu",
                "fontSize": 20,
                "marginBottom": 1,
                "marginTop": 1,
                "textAlign": "center",
              },
              undefined,
            ]
          }
        >
          Press Me
        </Text>
      </ViewManagerAdapter_ExpoLinearGradient>
    </TouchableOpacity>
  </View>,
  "debug": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByHintText": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByDisplayValue": [Function],
  "findByHintText": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByHintText": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByDisplayValue": [Function],
  "getByHintText": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByHintText": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByDisplayValue": [Function],
  "queryByHintText": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Button renders with text element as child 1`] = `
Object {
  "asJSON": [Function],
  "baseElement": <View
    pointerEvents="box-none"
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <View
      collapsable={true}
      pointerEvents="box-none"
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <TouchableOpacity
        style={
          Object {
            "backgroundColor": "transparent",
          }
        }
      >
        <ViewManagerAdapter_ExpoLinearGradient
          proxiedProperties={
            Object {
              "colors": Array [
                4279998859,
                4283151357,
              ],
              "endPoint": Array [
                1,
                0,
              ],
              "locations": undefined,
              "startPoint": Array [
                0,
                1,
              ],
            }
          }
          style={
            Array [
              Object {
                "alignItems": "center",
                "borderRadius": 8,
                "elevation": 2,
                "flexDirection": "row",
                "justifyContent": "center",
                "marginBottom": 5,
                "marginTop": 5,
                "minHeight": 55,
                "minWidth": 150,
                "padding": 8,
                "paddingLeft": 16,
                "paddingRight": 16,
                "shadowColor": "#1B998B",
                "shadowOffset": Object {
                  "height": 2,
                  "width": 0,
                },
                "shadowOpacity": 0.75,
                "shadowRadius": 3,
              },
              undefined,
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#fefefe",
                  "fontFamily": "apercu",
                  "fontSize": 20,
                  "marginBottom": 1,
                  "marginTop": 1,
                  "textAlign": "center",
                },
                undefined,
              ]
            }
          >
            Press Me
          </Text>
        </ViewManagerAdapter_ExpoLinearGradient>
      </TouchableOpacity>
    </View>
  </View>,
  "container": <View
    collapsable={true}
    pointerEvents="box-none"
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <TouchableOpacity
      style={
        Object {
          "backgroundColor": "transparent",
        }
      }
    >
      <ViewManagerAdapter_ExpoLinearGradient
        proxiedProperties={
          Object {
            "colors": Array [
              4279998859,
              4283151357,
            ],
            "endPoint": Array [
              1,
              0,
            ],
            "locations": undefined,
            "startPoint": Array [
              0,
              1,
            ],
          }
        }
        style={
          Array [
            Object {
              "alignItems": "center",
              "borderRadius": 8,
              "elevation": 2,
              "flexDirection": "row",
              "justifyContent": "center",
              "marginBottom": 5,
              "marginTop": 5,
              "minHeight": 55,
              "minWidth": 150,
              "padding": 8,
              "paddingLeft": 16,
              "paddingRight": 16,
              "shadowColor": "#1B998B",
              "shadowOffset": Object {
                "height": 2,
                "width": 0,
              },
              "shadowOpacity": 0.75,
              "shadowRadius": 3,
            },
            undefined,
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#fefefe",
                "fontFamily": "apercu",
                "fontSize": 20,
                "marginBottom": 1,
                "marginTop": 1,
                "textAlign": "center",
              },
              undefined,
            ]
          }
        >
          Press Me
        </Text>
      </ViewManagerAdapter_ExpoLinearGradient>
    </TouchableOpacity>
  </View>,
  "debug": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByHintText": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByDisplayValue": [Function],
  "findByHintText": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByHintText": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByDisplayValue": [Function],
  "getByHintText": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByHintText": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByDisplayValue": [Function],
  "queryByHintText": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
